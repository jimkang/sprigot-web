{
  "getDocReq": {
    "status": "got",
    "result": {
      "id": "resume-full",
      "rootSprig": "llkGiyAj",
      "authors": [
        "Jim"
      ],
      "admins": [
        "Jim"
      ],
      "format": "sprigot",
      "showStamps": false,
      "style": "resume",
      "sprigTree": {
        "id": "llkGiyAj",
        "doc": "resume",
        "title": "Résumé",
        "body": "Hi. I'm Jim Kang. I'm a software developer in Cambridge, Massachusetts. You can reach me at jimkang@gmail.com.<div><br></div><div>I've worked on commercial products that were run by millions of users, as well as software for art and concept exploration.</div><div><br><div><div>This is an overview of my work. If you just want to go straight to my publicly available code,&nbsp;<a href=\"https://github.com/jimkang/?tab=repositories\">here are my Github repos</a>&nbsp;and my&nbsp;<a href=\"https://www.npmjs.com/~jimkang\">NPM packages</a>.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</div></div></div>",
        "created": "2013-12-13T04:50:26.176Z",
        "modified": "2013-12-13T04:50:26.176Z",
        "tags": [
          "level-1"
        ],
        "formats": [],
        "children": [
          {
            "id": "sy3YNAral",
            "doc": "resume",
            "title": "Jobs",
            "body": "These are the jobs I've had, along with the things I've learned from them.",
            "created": "2013-12-13T23:06:35.444Z",
            "modified": "2013-12-13T23:06:35.444Z",
            "tags": [
              "level-1"
            ],
            "formats": [
              "sprigot",
              "bloge"
            ],
            "children": [
              {
                "id": "sHHQcangB",
                "doc": "resume",
                "title": "Web and mobile era",
                "body": "This part of my career started around 2008 and continues today.",
                "created": "2013-12-13T23:07:08.867Z",
                "modified": "2013-12-13T23:07:08.867Z",
                "tags": [
                  "level-1",
                  "dial-back-a-little"
                ],
                "formats": [],
                "children": [
                  {
                    "id": "spotify",
                    "doc": "resume",
                    "title": "Spotify",
                    "body": "I currently work at <a href=\"https://spotify.com/\">Spotify</a> on a team that builds music recommendations. Some products we've built are the automated <a href=\"https://open.spotify.com/user/spotify/playlist/37i9dQZF1DZ06evO1Mfhq8\">This Is</a> <a href=\"https://open.spotify.com/user/spotify/playlist/37i9dQZF1DZ06evO12mjqo\">playlists</a> (greatest hits playlists for artists that stay fresh by updating daily based on listening patterns) and <a href=\"https://timecapsule.spotify.com/\">Time Capsule</a>. Some things I build:<br /><br /><ul><li>Internal apps (web apps, Chrome extensions, Electron apps) for evaluating and adjusting algorithmically-generated content</li><li>The occasional prototype for potential new experiences</li><li>External promotional web sites</li><li>A process that analyzes and composes 2500+ images each day</li><li>External promotional web sites</li><li>Qualitative user surveys</ul><p>The job involves traditional full-stack web development, but much of the work is navigating a unique infrastructure. Spotify makes significant usage of protocols that aren't http, containerizes extensively, and is on the Google Cloud platform for example.</p>",
                    "created": "2017-01-24T00:03:52.622Z",
                    "modified": "2017-01-24T00:03:52.622Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": []
                  },
                  {
                    "id": "sGjOzWVjK",
                    "doc": "resume",
                    "title": "PayPal",
                    "body": "I worked at PayPal on the&nbsp;<a href=\"https://www.paypal.com/deals/\">Shop</a>&nbsp;team.<div><br></div><div>The Shop site serves coupons from various PayPal partners to hundreds of thousands of people per day. The front end is a single-page app built in AngularJS. The back end is a cluster of NodeJS servers that talk to various PayPal services to manage the coupon and user information.</div><div><br></div><div>We practiced TDD and pair programming effectively, and Agile, perhaps less effectively.</div><div><br></div><div>The nodes under this one are a bit of a postmortem (even though I think it's still going) on that experience, which I felt that, overall, was a good one.</div>",
                    "created": "2015-04-16T20:03:52.622Z",
                    "modified": "2015-04-16T20:03:52.622Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sZXaZMgzU",
                        "doc": "resume",
                        "title": "Enterprise",
                        "body": "This was very much an \"enterprise\" situation. The project our worked on involved many rules and many stakeholders, many of them in far-off locations. Some of them were even unknown until the point at which they revealed themselves!",
                        "created": "2015-04-27T15:55:41.711Z",
                        "modified": "2015-04-27T15:55:41.711Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [
                          "sprigot"
                        ],
                        "children": [
                          {
                            "id": "suBiBPyjQ",
                            "doc": "resume",
                            "title": "Agile",
                            "body": "There are many variations on Agile and millions of words have been written about it. It is so broad that I cannot speak to it as a whole. I can, however, discuss the slice of Agile that our team followed.<div><br></div><div>It had the stated goal of making our team more agile, which I took to mean being able to adjust to changing conditions.</div><div><br></div><div>To that end, goals for the product were broken down into stories (basically, tasks with metadata), and for each two week sprint, the team committed to completing a group of stories.</div><div><br></div><div>I, and much of the team, felt that while it was certainly better than the waterfall project planning from ~10 years ago. It could be much worse. However, it also created a series of mini-waterfalls.</div>",
                            "created": "2015-04-28T02:35:54.320Z",
                            "modified": "2015-04-28T02:35:54.320Z",
                            "children": [
                              {
                                "id": "sEuQehThK",
                                "doc": "resume",
                                "title": "Points",
                                "body": "<div>Management (upper? middle? definitely distant) wanted Agile to be a way to gather performance metrics in addition to being a project management methodology. So, instead of just determining what stories could be handled during the sprint, the team had to assign points to every story.</div><div><br></div><div>The points were a big deal. If the team did not complete as many points as in previous sprints, this meant that velocity was dropping, which was bad in the eyes of those that evaluated the points and sprints. So, when deciding what to prioritize, points had to be considered, even if there was something more important to do. This team usually just did what the more important thing was then took the point penalty or did some paperwork shuffling to keep points even.</div><div><br></div><div>The points done did not always reflect the state of the product. I feel that performance evaluators can get a better sense of the progress of the product by regularly checking out builds of the product than they can by looking at accumulated story points.</div><div><br></div><div>That is, of course, messier.</div>",
                                "created": "2015-04-28T02:45:59.850Z",
                                "modified": "2015-04-28T02:45:59.850Z",
                                "formats": [
                                  "sprigot"
                                ]
                              },
                              {
                                "id": "swWcvmxdy",
                                "doc": "resume",
                                "title": "Two weeks",
                                "body": "Sprints are a standard part of Agile. By deciding what to do every two weeks, a product team becomes more agile than the teams of yore (~10 years ago), which decided what they were going to do every half year with gigantic Gantt charts.<div><br></div><div>However, a lot of new information about both priorities and technology can come in over the course of two weeks, especially if stakeholders chime in at staggered intervals.</div><div><br></div><div>When some of the testing is done by dedicated QA engineers, as it was on this team, there is also a natural lull at the beginning of the sprint for QA and a rush for them at the end.</div><div><br></div><div>A cycle with a fixed beginning and end affect code reviews similarly. At the beginning, there is no code to review. In the middle, developers are trying to get their stories ready for review. At the end, there is a lot of code to review.</div><div><br></div><div>I think that something more continuous, like Kanban, would have taken advantage of new information and eliminated the natural pooling that occurs at the start and end of sprints.</div>",
                                "created": "2015-04-28T03:08:03.486Z",
                                "modified": "2015-04-28T03:08:03.486Z",
                                "formats": [
                                  "sprigot"
                                ]
                              },
                              {
                                "id": "slGhMmIhk",
                                "doc": "resume",
                                "title": "Estimating",
                                "body": "Because the&nbsp;<a href=\"#/resume/sEuQehThK\">points</a>&nbsp;were very important, we spent hours and hours each sprint deciding how many points should go to each story and whether a story was broken down far enough.<p class=\"p1\">A few strategies we used to cope with this kind of situation were:<br></p><p class=\"p1\">- Spike as often as possible.</p><p class=\"p1\">- Reject incomplete stories with incomplete completion definitions when possible.</p><p class=\"p1\">- Limit the definitions of stories to aspects of the product the local team has control over. If the story comes in from product as \"as a whatever, I need this new page to do this so blah\" and you do not have a designer you can easily reach, add the provision that the functionality will be implemented, but with a temporary UI.</p><p class=\"p1\">- Break stories into the smallest atomic deployable stories possible. Sometimes there was pushback on this, but it's worth trying.</p><p class=\"p1\">- We didn't do this often, but if you've gone several meetings and can't break something down enough, stop burning your energy on estimating, slap a number on it, and just start working.</p>",
                                "created": "2015-04-28T03:41:34.435Z",
                                "modified": "2015-04-28T03:41:34.435Z",
                                "formats": [
                                  "sprigot"
                                ]
                              }
                            ]
                          },
                          {
                            "id": "sPVNypjbT",
                            "doc": "resume",
                            "title": "Deployment",
                            "body": "There was much about our deployment tools that were proprietary, so I'll just say that there was a lot of waiting and mystery. This is bad, as you likely know. To mitigate that, you can:<div><br></div><div>- Get as many people on your team to get the rights to run the various deployment tasks to avoid bottlenecks around a few people.</div><div><br class=\"Apple-interchange-newline\">- If the logging provided by the platform is unreliable and complex, get your own logging in there. Even if it is something as plain as writing to a file, it's something you can count on when something goes wrong in production.</div><div><br></div><div>- When there is behavior that differs between test and production instances, don't assume that what you think was deployed really was deployed. Compare everything.</div><div><br></div><div>- Dig around the deployment infrastructure and take notes as often as possible.</div><div><br></div><div>- I also recommend reading&nbsp;<a href=\"http://en.wikipedia.org/wiki/Autofac\">Autofac</a>&nbsp;by Philip K. Dick, an excellent short story about debugging enormous, mysterious factories.</div>\n\n\n\n\n\n\n\n",
                            "created": "2015-04-29T16:23:26.993Z",
                            "modified": "2015-04-29T16:23:26.993Z"
                          },
                          {
                            "id": "sonnCCqoS",
                            "title": "Limitations",
                            "body": "<div>Working in an enterprise situation usually grants you a fairly huge advantage: Your product will often hit a huge, pre-built userbase of millions instead of sitting around hoping to be noticed.<br></div><div><br></div><div>The trade-off is that there will inevitably be a lot of limitations and a lot of rules. This is just the nature of large organizations. Executive management wants oversight over what labor does. Since they cannot watch everyone individually, they have to influence behavior via rules, which are often imperfect. They could alternatively just trust everyone to do the right thing, but that is far easier said than done.</div><div><br></div><div>What does a team do with a lot of good ideas that they're not allowed to execute? They talk about them with each other. Talk is cheap, but it's not at all worthless. If you work with talented and inventive people, you can grow personally by discussing ideas and techniques and tools, even if the product doesn't get to benefit from them.</div>",
                            "created": "2015-04-30T17:34:45.901Z",
                            "modified": "2015-04-30T17:34:45.901Z",
                            "doc": "resume"
                          }
                        ]
                      },
                      {
                        "id": "svXjGMZTt",
                        "doc": "resume",
                        "title": "Development practices",
                        "body": "The team I worked on at PayPal was large and perhaps because of that, followed several practices fairly strictly. I thought this was mostly a good thing.",
                        "created": "2015-04-28T03:23:45.300Z",
                        "modified": "2015-04-28T03:23:45.300Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [
                          "sprigot"
                        ],
                        "children": [
                          {
                            "id": "smnWrpvcE",
                            "doc": "resume",
                            "title": "Git flow",
                            "body": "This is the first team I worked on that adhered strictly to Git flow. All work was done on a branch other than `develop` and then pull requests were made into `develop`. At that point, the team had to review the pull request. At least two developers had to give it a \"good to merge\" for it to make it into the develop branch.<div><br></div><div>It resulted in 100% of the code getting reviewed (or at least glanced at). On previous teams (especially those that required a meeting for a code review), code reviews disappeared whenever the pressure and pace picked up.<br></div>",
                            "created": "2015-04-20T20:55:51.294Z",
                            "modified": "2015-04-20T20:55:51.294Z",
                            "children": [
                              {
                                "id": "sEgXUFHoq",
                                "doc": "resume",
                                "title": "Bottlenecks",
                                "body": "<div>One side effect of the process was that reviews became a bottleneck. People would prioritize their own coding first, then later review others' code. So, near the end of the two-week sprint, there was a lot of code waiting for review.</div><div><br></div><div>Often, the code reviews become more cursory when they have to be done fast. Or the reviews wouldn't get done, and the associated story wouldn't done for the sprint, which got us dinged in the corporate metrics. (More about the sprints later).</div>",
                                "created": "2015-04-21T19:34:07.433Z",
                                "modified": "2015-04-21T19:34:07.433Z",
                                "formats": [
                                  "sprigot"
                                ]
                              },
                              {
                                "id": "sECVLnyzU",
                                "doc": "resume",
                                "title": "Merge hell",
                                "body": "Another tough situation that cropped up from this process was like so:<div><br></div><div>- Developer B cuts a branch from `develop` and starts working.</div><div>- Developer A is done with their branch and has gotten it reviewed successfully. A merges into `develop`.</div><div>- By the time B's branch has been reviewed, 1.5 weeks have passed. `develop` is a very different world than it was when B's branch was born. It has trouble fitting in. B reworks it for a day to get it to merge and to get the tests to pass.</div><div><br></div><div>This isn't a problem specific to Git flow, but it does contribute to delays in merging, which cause this problem. I think that making pull requests that are small and do not compass an entire sprint story would have mitigated this. However, that's easier said than done, especially if the team is trained to think in terms of sprint stories.</div>",
                                "created": "2015-04-21T19:39:48.304Z",
                                "modified": "2015-04-21T19:39:48.304Z",
                                "formats": [
                                  "sprigot"
                                ]
                              }
                            ]
                          },
                          {
                            "id": "skbYUHvfH",
                            "doc": "resume",
                            "title": "Pair programming",
                            "body": "<div>At previous jobs, pair programming was mostly something you pulled out when there was trouble. When someone was having a lot of trouble or when big changes had to be made close to a code freeze, two pairs of eyes would go on code changes.</div><div><br></div><div>Here, the practice rose and fell week-to-week but averaged out to \"a lot\" of pair programing. Some weeks, there'd be barely any; some weeks, \"swarm\" programming would be the imperative, and four people would sit around one computer.</div>",
                            "created": "2015-04-28T03:27:59.046Z",
                            "modified": "2015-04-28T03:27:59.046Z",
                            "children": [
                              {
                                "id": "sfsmElvZt",
                                "title": "Doing together to learn better",
                                "body": "Regular (but not constant) pair programming is worthwhile simply for the knowledge transfer that happens.<div><br></div><div>You can talk all day about how writing tests first is a viable way to develop software, but it will never click with some people no matter how well you write. When I sat with developers that viewed it as abstract fancy talk and did it with them, it became more plausible and practical to them. This is not to say that they embraced it wholly; but the value (and problems) were communicated far better than any pure writing or talking could have.</div><div><br></div><div>The same happened for debugger usage (I seemed to be the only person on the team that used debuggers) and using `git bisect`. And for me, I learned about unit test mocking and dependency injection far more quickly by coding it with someone.</div><div><br></div><div>Even more importantly, you learn about how your team thinks by doing this, which smooths communication and coordination.</div>",
                                "created": "2015-04-30T15:36:36.193Z",
                                "modified": "2015-04-30T15:36:36.193Z",
                                "doc": "resume"
                              },
                              {
                                "id": "sLAINDzRw",
                                "title": "Mythical man-month is still mythical",
                                "body": "Sometimes, you really need to get things done as quickly as possible. We often were in this situation! There, it's often best to not pair program everything. Two developers working on one feature will not get it done twice as fast as one developer working on it.<div><br></div><div>Secondly, and this is a far less important concern, there are things you can come up with on your own that you cannot come up with if you are constantly communicating.</div>",
                                "created": "2015-04-30T16:01:45.073Z",
                                "modified": "2015-04-30T16:01:45.073Z",
                                "doc": "resume"
                              }
                            ]
                          },
                          {
                            "id": "sEPciILsU",
                            "doc": "resume",
                            "title": "TDD",
                            "body": "This was most thoroughly tested product I've ever worked on. As you may know, I enjoy&nbsp;<a href=\"#/resume/sYFfmHDJU\">TDD</a>. Part of the reason TDD works for me is because of:<p class=\"p1\"></p><p class=\"p1\">- Practices some members of this team introduced me to that keep tests from getting out of control.</p><p class=\"p1\"></p><p class=\"p1\">- Things this team (including me) did that made tests maintenance insane and hellish.</p><p class=\"p1\"><br></p>",
                            "created": "2015-04-30T02:03:41.999Z",
                            "modified": "2015-04-30T02:03:41.999Z",
                            "children": [
                              {
                                "id": "sJRczKBkx",
                                "doc": "resume",
                                "title": "Mocks",
                                "body": "Mocking seems ridiculous. You are building fake versions of all the components that connect to the component you want to test. Man, that seems like a lot of work!<div><br></div><div>Once you start doing it, though, it's not that big of a deal. The mocks do not have to be smart. For example, if you have a module that constructs an object with a function that provides a random value, the mock version of that function does not actually have to be random. It can just return, say, 3.</div><div><br></div><div>If your module is written in such a way that it's hard to mock inputs, then when you rewrite it so that it's easy, the code usually becomes easier to read and understand as well. (I should elaborate more on this later.)</div><div><br></div><div>At my previous job, the project did not have many external dependencies that we couldn't instantiate ourselves. Hence, it wasn't too hard to write end-to-end tests against our API. At PayPal, there were many external dependencies that we could not control. Those external dependencies often changed or went down and came back without notice.</div>",
                                "created": "2015-04-30T02:17:07.476Z",
                                "modified": "2015-04-30T02:17:07.476Z",
                                "formats": [
                                  "sprigot"
                                ]
                              },
                              {
                                "id": "srtuomdzu",
                                "doc": "resume",
                                "title": "Too much coverage",
                                "body": "If you've covered code in so many assertions that every time you make a change, you have to update twenty tests not directly related to that change, it's a good idea to evaluate whether those assertions are valuable. You can test something without locking down every single detail about how something works at the moment.<div><br></div><div>There's a balance to strike between covering a lot of code with tests and keeping those tests maintainable. Locking everything down always sounds admirable for enterprise products, the same way that national security at all costs is often hard to argue against. Less coverage is sometimes better. Every so often,&nbsp;<a href=\"#/resume/sLxfVyoCR\">no coverage is the right choice</a>.</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                                "created": "2015-04-30T02:31:35.334Z",
                                "modified": "2015-04-30T02:31:35.334Z",
                                "formats": [
                                  "sprigot"
                                ]
                              },
                              {
                                "id": "sgCLMjTzr",
                                "doc": "resume",
                                "title": "Shifting sands",
                                "body": "If you want to save some time, the branches below this amount to: Things changing during the run of a test can really mess up a test.",
                                "created": "2015-04-30T02:34:00.848Z",
                                "modified": "2015-04-30T02:34:00.848Z",
                                "formats": [
                                  "sprigot"
                                ],
                                "children": [
                                  {
                                    "id": "sUIJkcBLG",
                                    "title": "Mutable test data",
                                    "body": "<div>In JavaScript, everything available within the scope is mutable. There's a lot of (valid) complaining about this, but that mutability can be an advantage as well. In tests, though, it's mostly trouble.</div><div><br></div><div>I ran into situations in our tests in which I'd fix something in an individual test, then when I ran the entire test suite, it would fail. The problem turned out to be that the test data JSON file was being loaded via `require`, which creates a singleton instance of whatever it's loading. So, a test would alter that test data, and then you'd get different test data depending on what tests were run.</div><div><br></div><div>You can fix that problem by loading the JSON file in each test suite with fs.readFile/JSON.parse, but then you still have the problem of tests within the suite altering the data into something the other tests don't expect.</div><div><br></div><div>I introduced Immutable.js into our tests and use it on a lot of tests in my own project to keep things sane.<br></div>",
                                    "created": "2015-04-30T03:19:28.954Z",
                                    "modified": "2015-04-30T03:19:28.954Z",
                                    "doc": "resume"
                                  },
                                  {
                                    "id": "sLrGJXSYk",
                                    "title": "Helpful test modules",
                                    "body": "To help with mocking, we used a couple of test modules. One was Sinon.js, which lets you change existing methods in an object to mock ones that you can spy on. The other was Nock, a module that does the same thing, except to the built-in `http` module in Node.<div><br></div><div>Sinon especially sounds really nifty and helpful. However, you have to be very careful with these tools. If you change app code during a test, you have to be careful about putting back everything back. I feel that it is too easy to make mistakes, and when you do, the problems are sometimes hard to trace.</div><div><br></div><div>I find it much more reliable to write or rewrite your code to accept whatever it is you may want to mock as a function parameter or constructor paramteer instead of using these modules. If you think it'l be too onerous to have that many params, just have it fill in default of optional params are missing.</div>",
                                    "created": "2015-04-30T03:28:08.115Z",
                                    "modified": "2015-04-30T03:28:08.115Z",
                                    "doc": "resume"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "sGAvxICIk",
                        "doc": "resume",
                        "title": "Ping-pong",
                        "body": "It was at this company that I got to play ping-pong regularly. I had played it a bit as a kid.<div><br></div><div>It doesn't have a great reputation on social media of late because it's mixed up with startups that often mention it (and beer and foosball) as perqs (perq is an abbreviation of perquisite, BTW, so spelling it with a q is correct) to attract bros. And assuming that worthwhile software engineers will love ping-pong (or anything, really) is terrible and exclusionary.</div><div><br></div><div>That said, I really enjoy the game itself.</div>",
                        "created": "2015-04-27T20:34:30.340Z",
                        "modified": "2015-04-27T20:34:30.340Z",
                        "formats": [
                          "sprigot"
                        ],
                        "children": [
                          {
                            "id": "sZwHfXbpS",
                            "doc": "resume",
                            "title": "Balance",
                            "body": "The sport is very well-balanced on at least couple of axes:<div><br></div><div>- It looks like a kid's game or possibly a carnival game. It involves a ball that can't hurt you even if it whales you in the fact. (I have verified this. With my face.) At the same time, it can move intimidatingly fast. It is played in the Olympics.</div><div><br></div><div>- Accordingly, you can play it like it's a lark, or you can play it like you're in the Olympics.</div><div><br></div><div>- Finally, as a terrible beginner, you can have fun playing other beginners. But playing more will build your skill, and skill gains, even minor ones like mine, are tangible and satisfying.</div><div><br></div><div>For the growth of a game, it's very helpful to motivate the unskilled and skilled alike. It's that mixture that keeps Texas Hold 'Em going. The skilled win more often, but the unskilled can still exert influence over the game, giving them a reason to keep playing.</div>",
                            "created": "2015-04-27T20:39:54.417Z",
                            "modified": "2015-04-27T20:39:54.417Z"
                          },
                          {
                            "id": "sZlwGQofC",
                            "title": "Speed",
                            "body": "I really like how fast the game can be. Not much else involves such rapid motion without also being far more dangerous. This is a super-dork comparison, but volleying a ping-pong ball fast kinda feels like how I imagine blocking blaster shots with a lightsaber does.",
                            "created": "2015-04-28T02:26:37.224Z",
                            "modified": "2015-04-28T02:26:37.224Z",
                            "doc": "resume"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "szOL1TqW8",
                    "doc": "resume",
                    "title": "NPR",
                    "body": "I was part of the team that worked on Composer, a data warehouse for over 200 NPR member stations' music data written in Node.js and Backbone.js.",
                    "created": "2013-12-13T23:07:57.206Z",
                    "modified": "2013-12-13T23:07:57.206Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sm3nu7wQT",
                        "doc": "resume",
                        "title": "Composer",
                        "body": "<div>Composer is a platform and a web app. It stores information about music and time: schedules, playlists, program and episode details, and song metadata.</div><div><br></div><div>It provides widgets that member stations can drop onto their web sites to show schedules or currently playing songs. When it comes time for stations to pay their royalties, NPR pulls the data out of Composer to generate the reports. A few stations use its API directly to automate the reporting of their playlists.</div>",
                        "created": "2013-12-19T03:41:53.105Z",
                        "modified": "2013-12-19T03:41:53.105Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": []
                      },
                      {
                        "id": "srTQDEXoP",
                        "doc": "resume",
                        "title": "OAuth",
                        "body": "One of the first tasks I had on this team was to add OAuth-like security to the Composer API. Some requirements gathering revealed we wanted protection from man-in-the-middle attacks and replay attacks, and the ability to expire tokens. I implemented a scheme more like Twitter's xAuth, trading some security rigorousness for user and developer convenience.<div><br></div><div>During this work, I learned that every OAuth implementation is different, and the OAuth spec, as verbose as it is, does leave room for interpretation.</div>",
                        "created": "2013-12-13T23:08:26.199Z",
                        "modified": "2013-12-13T23:08:26.199Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [],
                        "children": [
                          {
                            "id": "shupGsT3g",
                            "doc": "resume",
                            "title": "Security vs. usability",
                            "body": "<div>When you ask people how secure they want something, they are likely to say \"as secure as possible!\" without considering:</div><div><br></div><div>1. Security isn't one-dimensional. It is not helpful to say you want \"security in general.\" You have to figure out what you want to be secure against.</div><div><br></div><div>2. Increased security isn't an unambiguous good. It comes with a cost, often in usability, and it is not necessarily frivolous to say that the cost is too high in some situations.&nbsp;</div><div><br></div><div>When I was working on Jotunheim, I supported Facebook and Flickr, which both used an OAuth 1.0 scheme to authorize at the time.</div><div><br></div><div>Kicking people out of the app to go to a web page to log in, then getting the resulting verification code back to the app so that it could use it to then get the actual access token was a hassle. Worse, it risked losing the user.</div><div><br></div><div>That's why Twitter's xAuth, though criticized for being nonstandard (all the OAuths are actually a little nonstandard), was a breath of fresh air&mdash;you could go straight from your consumer key and secret and the user's login info to an access token.</div><div><br></div><div>Even with that burden removed, when I later wrote the example code for authenticating with the API and had to explain it multiple times to the rest of the team, signing xAuth-style requests was still plenty burdensome. We wanted third party adoption, and a few member stations did use the Composer API to help automate their playlist information data entry. However, I have no doubt the authentication process scared plenty of busy developers away.</div>",
                            "created": "2013-12-13T23:08:41.098Z",
                            "modified": "2013-12-13T23:08:41.098Z",
                            "tags": [
                              "level-3",
                              "click-to-display"
                            ],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "s3DUsGoxw",
                        "doc": "resume",
                        "title": "Automated testing",
                        "body": "I've done two major refactorings for Composer. One was to implement OAuth-style security on sensitive API endpoints. The other was to update the way we handled fine-grained control over resources.<div><br></div><div>To make these core changes, I needed to first establish how everything worked at the moment so that I could preserve that way of working. If these changes were on the UI level, you could just click through various parts of the web app to see how it worked and then make sure it still worked that way.</div><div><br></div><div>If what you are working on is an API, you can't do that. You actually have to call the API endpoints and see what you get. This is a good thing, though, because once you write the code to call the endpoints, you're halfway to having a suite of tests written, which will be much faster to run than a bunch of manual UI clicking.</div><div><br></div><div>The development loop becomes very short and simple. Run test, make code change, repeat. Once you have a body of tests that exercise a significant portion of the codebase (it doesn't have to be complete), you can be more confident about doing what makes sense in your code without breaking stuff instead of fearfully making the smallest changes possible because you are afraid of the unknown.</div>",
                        "created": "2013-12-13T23:09:28.289Z",
                        "modified": "2013-12-13T23:09:28.289Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [],
                        "children": [
                          {
                            "id": "sULOzl4VS",
                            "doc": "resume",
                            "title": "UI testing",
                            "body": "Of course, you could also automate UI testing. I did for Jotunheim, using Square's KIF (keep it functional) test framework. However, this is far more messy and finicking and timing-dependent than API testing.",
                            "created": "2013-12-13T23:11:50.391Z",
                            "modified": "2013-12-13T23:11:50.391Z",
                            "tags": [
                              "level-3",
                              "click-to-display"
                            ],
                            "formats": [
                              "sprigot"
                            ]
                          },
                          {
                            "id": "sLrEB1UMz",
                            "doc": "resume",
                            "title": "Coming up for air",
                            "body": "<span style=\"font-size: 24px;\">I've had previous experiences with automated testing (unit testing, functional testing), but none of them stuck quite as well as this one. I think the difference was that this product's API provided a big, obvious, and relatively immutable surface against which to test.</span><div><font size=\"5\"><br></font></div><div><font size=\"5\">One problem in writing unit tests is picking targets that makes sense. You want the test to exercise a non-trivial amount of code and to not be testing something that's likely to get tossed or to get changed really frequently. You want to know and reproduce the pre-existing state in which that code usually runs. You could spend a lot of time examining code to discern whether these conditions apply to it. If there's an API, that stuff is trivial.</font></div><div><font size=\"5\"><br></font></div><div><font size=\"5\">I think it's important in general that apps come up for air periodically at points other than the UI (meaning that you can run pieces of the app without having to use the UI and go through several layers or dependencies), and an API is a great way to guarantee that happens, whether you plan to have third-party clients or not.</font></div><div>\n\n\n\n\n\n\n\n<p class=\"p1\"><b>Update</b> (4/30/2015): I still mostly stand by this, but I now think it's valuable to test at a <a href=\"#/resume/sFGOQftAU\">more granular level</a> than this.</p></div>",
                            "created": "2013-12-13T23:12:10.121Z",
                            "modified": "2013-12-13T23:12:10.121Z",
                            "tags": [
                              "level-3",
                              "click-to-display"
                            ],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "s4K0HkyhX",
                        "doc": "resume",
                        "title": "Iterative design",
                        "body": "While working on the UI side of this project, it was the first time I was able to participate in genuinely iterative design. In previous jobs, usually, the designer handed over PSDs or PDFs and asset files, and you had to write code to get the product to look like that.<div><br></div><div>The designers were usually fine human beings and would give way on a few details if they were really technically infeasible, but it wasn't iterative. There were at most two iterations in those processes.<div><br></div><div>On this team, the product owner would state clearly what the goals of the feature or change were as explicitly as he could, and the designer and developer would talk it through to clarify (or sometimes challenge) those goals, then the designer would present rough sketches and mock things up in HTML. The developer then took a pass at implementing these design ideas in the product, and everyone would take a look, make changes in direction as necessary, then we'd keep on looping until we could let go of it.</div><div><br></div><div>This didn't yield perfect features, but it did let us take advantage of new design and programming insights as they came in. We didn't have to commit to fixes premises we knew were not as valid as they were originally.</div></div><div><br></div><div>Agile and Kanban are easy to make fun of (I know I do it), but some aspects of them just make sense.</div>",
                        "created": "2013-12-13T23:12:37.269Z",
                        "modified": "2013-12-13T23:12:37.269Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [],
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "spaM3T7DU",
                    "doc": "resume",
                    "title": "Ghost Crab Workshop",
                    "body": "I took a sabbatical to see if I could come up with a product that could be the basis of a tiny business that would support me. As I knew was likely, I did not. However, I found that making time to explore Unity 3D, game design, and modern web development to be very valuable.",
                    "created": "2013-12-13T23:13:27.697Z",
                    "modified": "2013-12-13T23:13:27.697Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sfZiXM2PI",
                        "doc": "resume",
                        "title": "Game design hubris",
                        "body": "<div></div>I really enjoy board games.&nbsp;<a href=\"http://boardgamegeek.com/\">Modern board games</a>&nbsp;are not&nbsp;at all like Monopoly&mdash;they are great explorations of systems and what they suggest to the human mind. My favorite games on iOS are multiplayer board game adaptations.<div><br></div><div>I tried to follow that pattern. I'd come up with a ruleset, prototype it on paper, then make a digital version of it with Unity 3D and NGUI, thereby getting it to many viable platforms.</div><div><br></div><div>Those first two steps were so hard that I glazed over them and started implementing. When I revisited the game design, I was finding it wasn't at all interesting. Eventually, I came up with something that seemed fun to play by myself (a game in which players staked out tiles on the board to make poker-like hands to gain points and and access to effects), but playing it with a group flushed out a ridiculous amount of flaws.</div><div><br></div><div>I then went through many attractive-sounding board game ideas, eliminating some at the prototype phase, and most at the \"actually thinking it through rigorously\" phase. I concluded I wasn't ready to do this.</div>",
                        "created": "2013-12-19T04:10:52.476Z",
                        "modified": "2013-12-19T04:10:52.476Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      },
                      {
                        "id": "str6J37bm",
                        "doc": "resume",
                        "title": "Contracting",
                        "body": "I had this idea of doing some contract work, and perhaps taking that on full-time if it worked out well. I went to a few tech business events to network, then I lost the will to keep going to them.<div><br></div><div>In the end, I did a total of one contract, fixing build and performance problems in an existing Unity iOS project. More of my time was spent on investigating, estimating, and emailing and Skyping with the client and their associates than was spent on development.</div>",
                        "created": "2013-12-19T04:33:36.165Z",
                        "modified": "2013-12-19T04:33:36.165Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      },
                      {
                        "id": "sgnWRsP1B",
                        "doc": "resume",
                        "title": "Rock, Paper, Armbar",
                        "body": "Most of my time during this period was spent on a game I temporarily named \"Rock, Paper, Armbar.\" It was to be a multiplayer turn-based mixed martial arts game.<div><br></div><div>Players secretly chose combinations of maneuvers and&nbsp;<a href=\"http://cl.ly/image/2U2o1H0b3n2G\">techniques</a>&nbsp;for each \"beat\" in the&nbsp;fight, then the game would play out the effects of those choices. Techniques had specific effects on certain other classes of techniques. For example, one fighter's head kick attempt made it more likely that their opponent's double-leg takedown would succeed.</div><div><br></div><div>There were different techniques available for each position. A fighter could drop hammer fists if they had mount on their opponent, while a standing fighter with a wrist and underhook or waist grip on their opponent could attempt a harai goshi throw.</div>\n\n\n\n\n\n\n\n",
                        "created": "2013-12-19T04:40:53.331Z",
                        "modified": "2013-12-19T04:40:53.331Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ],
                        "children": [
                          {
                            "id": "sJRo5WM0S",
                            "doc": "resume",
                            "title": "Art hubris",
                            "body": "<div>The combinations of these techniques and&nbsp;<a href=\"http://cl.ly/image/0o032Y3U2x34\">positions</a>&nbsp;made the number of different body poses that would have to be drawn explode. I remember myself being good at doodling people fighting as a kid, but it turned out that merely drawing recognizable&nbsp;<a href=\"http://cl.ly/image/0W0q2Y3H380L\">silhouettes of people throwing jabs while slipping</a>&nbsp;took the better part of a day. I kept at it for week, hoping I'd get better and faster, but it was hopeless.</div>\n\n\n\n\n\n\n\n<div><br></div><div>I looked at programmatically updating 3D model skeletons using Unity's Mecanim system, but it was no small feat to describe a simple right cross by moving skeleton joints' 3D positions, much less make it look non-terrible.</div><div><br></div><div>I had to abandon the game.</div>",
                            "created": "2013-12-19T05:10:21.870Z",
                            "modified": "2013-12-19T05:10:21.870Z",
                            "tags": [],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "si8Ot8WPI",
                        "doc": "resume",
                        "title": "Meteor",
                        "body": "<div>At the time, I didn't like server programming. I had worked with PHP on and off since 2002, when I built my weblog at the time with it. PHP's support for templating was so much nicer than the alternative I knew then, which was using Perl to generate HTML by formatting strings. However, I grew to hate it over time.<br></div><div><br></div><div>So, I was looking at backend-as-a-service providers for my projects, when I stumbled into&nbsp;<a href=\"http://www.meteor.com/\">Meteor.js</a>. Meteor&nbsp;has amazingly low friction example projects which sucked me into building my own server (and client) apps. I saw how far JavaScript had come in the last couple of years, and how useful and fun it could be to write your own server.</div><div><br></div><div>Over time, I found that Node.js itself was what I needed to do what I wanted to do, but Meteor was an important gateway framework for me, personally.</div>",
                        "created": "2013-12-19T05:14:39.923Z",
                        "modified": "2013-12-19T05:14:39.923Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "s0VEAY0Or",
                    "doc": "resume",
                    "title": "Modo Labs",
                    "body": "The company built mobile apps for big institutions like universities and handled wrapping up their existing data sources to make them easily mobile-consumable.<div><br></div><div>Mostly, I worked on iOS apps, with some web service development here and there. In addition to bread-and-butter Cocoa Touch development, we explored Core Animation, automating media file encryption, and web view-centric native apps.</div>",
                    "created": "2013-12-13T23:13:47.546Z",
                    "modified": "2013-12-13T23:13:47.546Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": []
                  },
                  {
                    "id": "sjHg7nTd3",
                    "doc": "resume",
                    "title": "Voter Activation Network",
                    "body": "Their business was centered around a massive data warehousing web application. I helped with maintenance on that and also built a WYSIWYG form editor for the web. Later, I worked on back and front ends for their canvassing iOS app, MiniVAN Touch.<br>",
                    "created": "2013-12-13T23:14:03.936Z",
                    "modified": "2013-12-13T23:14:03.936Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sFFWjvXu8",
                        "doc": "resume",
                        "title": "JavaScript as a \"real\" language",
                        "body": "This was the first time I did anything more significant in the browser than form validation and Greasemonkey scripts. Previously, most of what I had done on the web was on the server side in PHP.<div><br></div><div>While researching how to go about it, I discovered jQuery and the power of CSS selectors. (Later, I found out are native to JavaScript itself, but jQuery made them seem more accessible.)</div><div><br></div><div>Then, while searching for \"standard\" ways to create objects in JavaScript, I came across Douglas Crockford's \"JavaScript: The Good Parts\" talk. It was phenomenal. I started using the hell out of closures. Things were still a little annoying, though, and I pined for a C++ style formal system of class creation and a convenient STL-ish library.</div><div><br></div><div>When I came back a couple of years later, I had come to like being able to create objects without the formalism of classes, quite a lot of utility functions had been implemented by core JavaScript, and Underscore.js filled in everything else one might need. It was amazing.</div>",
                        "created": "2013-12-13T23:14:21.763Z",
                        "modified": "2013-12-13T23:14:21.763Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "scVIKBr0M",
                    "doc": "resume",
                    "title": "Obama for America",
                    "body": "I spent a month as a \"Data Fellow\" during the 2008 presidential campaign. We automated manual tasks and wrote programs to look through voter contact history to find good targets for calls.&nbsp;<div><br></div><div>Indiana went blue, which it normally doesn't. It felt good, I met great people, and I saw how the&nbsp;relatively simple&nbsp;application of technology could make a big impact.</div>",
                    "created": "2013-12-13T23:15:40.469Z",
                    "modified": "2013-12-13T23:15:40.469Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": []
                  }
                ]
              },
              {
                "id": "swYXIE7lj",
                "doc": "resume",
                "title": "Windows era",
                "body": "This era lasted from about right after college (1999) to 2007.",
                "created": "2013-12-13T23:07:28.375Z",
                "modified": "2013-12-13T23:07:28.375Z",
                "tags": [
                  "level-1",
                  "dial-back-a-little"
                ],
                "formats": [],
                "children": [
                  {
                    "id": "slHvqK9Ct",
                    "doc": "resume",
                    "title": "GN Resound",
                    "body": "GN Resound is a hearing aid company. Hearing aids are small digital sound processors. Audiologists can calibrate and gather data from them by connecting them to a computer.<div><br></div><div>I was on the team that worked on that software, which at the time, was a C++ COM/ATL-based Windows desktop application. Toward the end of my time there, we began porting it to C#/.NET.</div>",
                    "created": "2013-12-14T04:23:28.336Z",
                    "modified": "2013-12-14T04:23:28.336Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sFv5u4SDF",
                        "doc": "resume",
                        "title": "COM and ATL",
                        "body": "COM (Component Object Model) was a way of making components that could ostensibly work together without knowledge of each others' source code that Microsoft was pushing very hard at the time. The promise was that you could swap out a COM component with an updated one, and as long as it implemented the same interfaces, the other components couldn't tell.<div><br></div><div>ATL (Active Template Library) abstracted out some of the boilerplate involved in making COM components. There was also a WTL, I believe. I forget what the difference between that and ATL was.</div><div><br></div><div>In practice, COM components were very fragile, and no, you often could not swap out a COM component for another one and reasonably expect it to talk to the other COM components without trouble. Microsoft had gotten companies to write their applications in all COM components, whether they planned to ship individual components independently or not. Using these instead of C++ classes or modules was considered a \"best practice.\" It added a lot of extra work and risk.&nbsp;</div>",
                        "created": "2013-12-14T04:28:37.623Z",
                        "modified": "2013-12-14T04:28:37.623Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      },
                      {
                        "id": "s7E9anGlp",
                        "doc": "resume",
                        "title": "Flash and Flex",
                        "body": "<div>I started experimenting with Flash and Flex around that time. At work, I prototyped proposed UI changes with it. At home, I wrote an app that posted statuses to Twitter, Facebook, and Google Talk. (In retrospect, it was a precursor to&nbsp;<a href=\"#/resume/sk10P9UiJ\">Jotunheim</a>.)</div><div><br></div><div>I found that I wanted to do the kind of \"creative\" work that is usually done with Flash, but I found Flash's authoring tools and language to be grating.</div>\n\n\n\n\n\n\n\n",
                        "created": "2013-12-19T05:51:02.124Z",
                        "modified": "2013-12-19T05:51:02.124Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "siQd4ALlV",
                    "doc": "resume",
                    "title": "InstallShield",
                    "body": "This is where I learned to write code that worked in real-world situations when run by&nbsp;thousands (millions in a few cases) of real users.&nbsp;I worked on a team that built a few different SKUs of an IDE that let developers author \"setups,\" programs that installed their software onto computers.<div><br></div><div>The IDE was a Windows application written in C++.</div>",
                    "created": "2013-12-14T04:45:29.014Z",
                    "modified": "2013-12-14T04:45:29.014Z",
                    "tags": [
                      "level-1",
                      "dial-back"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sLqPMKQ8s",
                        "doc": "resume",
                        "title": "A different time",
                        "body": "The application had an architecture that had many tiers and inheritance everywhere. Layers and inheritance were unquestionable at the time. I know I didn't question it, no matter how many times I got burned by it.<div><br></div><div>It also fully embraced the COM paradigm, which was sold hard by many plenty of smart people, adding all sorts of unnecessary complexity. But complexity was admirable then.</div><div><br></div><div>This reminds me that whatever patterns we may hold in high esteem now may in fact be full of holes.</div>",
                        "created": "2013-12-14T17:29:44.164Z",
                        "modified": "2013-12-14T17:29:44.164Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      },
                      {
                        "id": "sEjMscLrB",
                        "doc": "resume",
                        "title": "Death marching with pride",
                        "body": "<div>I started in developer support. I wasn't sure I wanted to work in software for a living, but with nothing else to focus on in my life right after college, I really got into it and started working as a developer a year later.</div><div><br></div><div>I embraced death marches and generally worked like crazy, figuring that it was the best way to get better. I did get better, but that was certainly not a good way to go about it. I really wish I had taken a broader view of technology at that time and had considered the value of approaches other than what was going on at work.</div>",
                        "created": "2013-12-19T06:01:09.985Z",
                        "modified": "2013-12-19T06:01:09.985Z",
                        "tags": [],
                        "formats": [
                          "sprigot"
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "id": "sRIAcH7eH",
            "doc": "resume",
            "title": "Projects",
            "body": "<div>Here are the projects I've done. They include web and iOS apps, Node apps that respond in real-time to Twitter streams, an interactive algorithm visualization, music processors, and Chrome extensions.</div><div><br></div><div>Like everyone, I have more ideas than I can possibly see through in a lifetime, but I am committed to making as many of them real as I can.</div><br /><div><strong>Update, 10/18/2017:</strong> This project list isn't quite up-to-date. <a href=\"http://jimkang.com/observatory/\">this visualization</a>, though a work in progress, is updated live, so you may want to look over there.",
            "emphasize": true,
            "created": "2013-12-18T14:05:59.333Z",
            "modified": "2013-12-18T14:05:59.333Z",
            "tags": [
              "level-1",
              "click-to-display"
            ],
            "formats": [
              "sprigot",
              "bloge"
            ],
            "children": [
              {
                "id": "ssDaczROO",
                "doc": "resume",
                "title": "Apps",
                "body": "Most of these lean strongly to the app side of the app-web site spectrum, but there's a few that are mostly just web sites for content viewing.",
                "created": "2015-04-29T16:34:30.744Z",
                "modified": "2015-04-29T16:34:30.744Z",
                "tags": [
                  "level-1",
                  "dial-back-a-little",
                  "click-to-display"
                ],
                "children": [
                  {
                    "id": "sFgCUamqj",
                    "doc": "resume",
                    "title": "Sprigot",
                    "body": "\n\n\n\n\n\n\n\n<a href=\"http://jimkang.com/sprigot\">Sprigot</a>&nbsp;is the web app you see right now. It's a way to write and present branching documents. I started writing it in July. I still have a lot planned for it.",
                    "emphasize": true,
                    "created": "2013-12-13T04:53:01.147Z",
                    "modified": "2013-12-13T04:53:01.147Z",
                    "tags": [
                      "click-to-display"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "snKxh5m9q",
                        "doc": "resume",
                        "title": "Why I wrote it",
                        "body": "I was struggling to write about a situation that a friend of mine was experiencing. It was complex, and a linear essay didn't complement my thinking about the situation.<div><br></div><div>I wanted to present a web of thoughts, rather than a linear chain, and nothing existing did quite what I wanted, so I started building this app.</div><div><br></div><div>I think Sprigot can be useful for purposes other than storytelling or exposition, however, and I'll be exploring them in the months to come.</div>",
                        "created": "2013-12-13T04:53:28.536Z",
                        "modified": "2013-12-13T04:53:28.536Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": []
                      },
                      {
                        "id": "sABcTnr0E",
                        "doc": "resume",
                        "title": "D3",
                        "body": "When I started working on Sprigot, I saw&nbsp;<a href=\"http://d3js.org/\">D3</a>&nbsp;as a&nbsp;library that would produce the graph I wanted.<div><br></div><div>That it was, but it also introduced to me a different way of organizing an application. Rather than having a controller manipulate a single view (or at most, a few views) using a single model, as in traditional model-view-controller applications, D3 maps data models to graphical representations, en masse.</div><div><br></div><div>This is powerful, and I've used it in apps that have no graphs at all.&nbsp;<a href=\"http://macwright.org/presentations/\">Tom MacWright</a>&nbsp;gave a good talk at GothamJS in which he explained, among other things, how he used it for a company personnel web site.</div>\n\n\n\n\n\n\n\n",
                        "created": "2013-12-13T04:53:48.071Z",
                        "modified": "2013-12-13T04:53:48.071Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [],
                        "children": [
                          {
                            "id": "s1R6F4ztW",
                            "doc": "resume",
                            "title": "Enter/Update/Exit",
                            "body": "<div>Arguably, D3.js has two main \"clusters\" of functionality. The first is behind the scenes: data binding. It lets you bind arrays to abstractions called selections, which you can then use to perform en masse operations on them, including creating and updating SVG or HTML elements.&nbsp;</div><div><br></div><div>More importantly, binding is reentrant: If you rebind a selection to an array that is different from the array that was previously bound to it, D3 will note for you which array elements are new and which elements were there before and are now gone. It enables you to efficiently update the presentation of arrays as they change.</div>",
                            "created": "2013-12-18T05:17:33.628Z",
                            "modified": "2013-12-18T05:17:33.628Z",
                            "tags": [],
                            "formats": [
                              "sprigot"
                            ]
                          },
                          {
                            "id": "s8tjFFt38",
                            "doc": "resume",
                            "title": "DOM abstraction",
                            "body": "<div>The other cluster of functionality is the abstraction of HTML and SVG element manipulation. The level of abstraction ranges from simply making things easier to type to taking massive mental weight off of the developer, like the timing handling in d3.transition and d3.tween.</div><div><br></div><div>Parts of D3 are SVG-specific, but those parts do not impose themselves in the rest of D3, and thus D3 can be used to manipulate plain HTML or Canvas stuff. I've found it helpful for any situation involving sets of data.</div>",
                            "created": "2013-12-18T05:18:28.293Z",
                            "modified": "2013-12-18T05:18:28.293Z",
                            "tags": [],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "saR9OsZ2K",
                        "doc": "resume",
                        "title": "Rolling your own",
                        "body": "In contrast to my experience with Jotunheim, this time around, I found myself rolling a lot of my own stuff instead of using existing libraries.<div><br></div><div>When questioning an \"official\" framework's design decisions, more than once I've gotten the response, \"Well, it was written by smarter people than us.\"</div><div><br></div><div>Maybe so! However, the people working on a project have the advantage of specific knowledge of their project's goals and requirements. Given that, I think there's situations in which the little people can write something better and less heavy than a general framework.</div><div><br></div><div>Not defaulting to frameworks and libraries in Sprigot has worked out well in terms of keeping things small and within my grasp. It's been a marked contrast to my experiences with&nbsp;<br>\n\n\n\n\n\n\n\n<a href=\"#/resume/sPhTexgMo\">Jotunheim</a>&nbsp;and more&nbsp;than a few work projects in my career.</div><div><br></div><div>Update, 5/4/2015: I now have a&nbsp;<a href=\"#/resume/sbxBXlZRg\">slightly more refined view</a>. I favor comprehendible libraries that do specific tasks over either frameworks or writing my own stuff.</div>\n\n\n\n\n\n\n\n",
                        "created": "2013-12-13T04:54:18.503Z",
                        "modified": "2013-12-13T04:54:18.503Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": []
                      },
                      {
                        "id": "siuSQufjC",
                        "doc": "resume",
                        "title": "Roadmap",
                        "body": "- Unify mobile and desktop with side-by-side&nbsp;layouts&nbsp;for both.<div>- Incorporate new API for easier-cross document sharing.</div>",
                        "created": "2015-04-30T20:32:45.329Z",
                        "modified": "2015-04-30T20:32:45.329Z",
                        "tags": [
                          "click-to-display"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "sbnsVJAFv",
                    "doc": "resume",
                    "title": "An interactive explanation of quadtrees",
                    "body": "<div>When I was building my cellular automaton, I wanted to try storing my cells in quadtrees to save space. It was then that I realized I wasn't that clear on how quadtrees work, so I built&nbsp;<a href=\"http://jimkang.com/quadtreevis/\">this explanation</a>.</div><div><br></div><div>It was pretty well-received. Non-programmer-, non-mathematics-types understood quadtrees by trying it. The power of moving shapes!</div>",
                    "created": "2015-04-29T18:15:47.154Z",
                    "modified": "2015-04-29T18:15:47.154Z",
                    "tags": [
                      "click-to-display"
                    ]
                  },
                  {
                    "id": "sk10P9UiJ",
                    "doc": "resume",
                    "title": "Jotunheim",
                    "body": "<a href=\"http://ghostcrabworkshop.com/jotunheim/\">Jotunheim</a>&nbsp;is a journal iOS app that posts text, images, and video&nbsp;to multiple social networks. The bulk of it was written over the course of 2011.",
                    "emphasize": true,
                    "created": "2013-12-13T04:51:13.927Z",
                    "modified": "2013-12-13T04:51:13.927Z",
                    "tags": [
                      "click-to-display"
                    ],
                    "formats": [],
                    "children": [
                      {
                        "id": "sPhTexgMo",
                        "doc": "resume",
                        "title": "What not to do",
                        "body": "Mostly, working on Jotunheim taught me about what not to do. That sounds terrible, but it's really very useful.",
                        "emphasize": false,
                        "created": "2013-12-13T04:51:43.292Z",
                        "modified": "2013-12-13T04:51:43.292Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [
                          "sprigot"
                        ],
                        "children": [
                          {
                            "id": "s1eNtlBsz",
                            "doc": "resume",
                            "title": "Itch scratching",
                            "body": "<div>\"Scratching your own itch\" is not a guarantee that you'll be satisfied with a project, especially if you expect users. No matter how well you scratch it, sometimes, you're the only one with that itch. You may want to scratch it anyway, but you probably want to limit the cost of scratching it somehow.</div><div><br></div><div>Being honest with yourself about your expectations for the project is also important. Jotunheim was largely ignored, and when it was, I realized that I wanted users more than I had admitted when I started pouring effort into it.</div>",
                            "created": "2013-12-19T22:54:51.405Z",
                            "modified": "2013-12-19T22:54:51.405Z",
                            "tags": [],
                            "formats": [
                              "sprigot"
                            ]
                          },
                          {
                            "id": "simFd2yFY",
                            "doc": "resume",
                            "title": "Frameworks! Get stuff for free!",
                            "body": "<div>Do not integrate a library just because it makes life easier in the short term. It's extra code, and if it solves a problem you don't know how to solve, it's often code you don't understand.&nbsp;</div><div><br></div><div>I implemented a lot of features quickly this way. However, when bugs showed up after the release, I paid for that quickness in under-duress debugging time.</div>",
                            "created": "2013-12-19T22:57:41.663Z",
                            "modified": "2013-12-19T22:57:41.663Z",
                            "tags": [],
                            "formats": [
                              "sprigot"
                            ]
                          },
                          {
                            "id": "siGcjbegX",
                            "doc": "resume",
                            "title": "Text is not a crime",
                            "body": "Don't bend over backward to avoid using text in UI design. As elegant and space-saving as icons may be, some functionality is hard to express that way. Humans invented text for a reason.<div><br></div><div>I spent days designing the top toolbar items in Jotunheim. They looked cool and made an internal sense to me, but were a total mystery to most users. I then built an animated help system to explain what various icons and controls in the app were, which was pretty cool, but it was a lot of effort for a system that was used at most once or twice by each user.</div><div><br></div><div>If it hadn't taught me about Core Animation, I would have completely regretted not simply using text and a little more space.</div>",
                            "created": "2013-12-19T23:00:29.710Z",
                            "modified": "2013-12-19T23:00:29.710Z",
                            "tags": [],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "se8r7gIYl",
                        "doc": "resume",
                        "title": "Why did I need it?",
                        "body": "I wrote Jotunheim because, at the time, I was cross-posting to Twitter, Facebook, and Flickr. I didn't want to repeat myself, but I also wanted to be able to review what I wrote in months or years past, like a normal journal. To this day, it is still not easy to search Twitter for things you've written.<div><br></div><div>I also knew that people deleted accounts on social networks for various reasons. If I ended up doing that (and I did), I didn't want to lose what I had posted. Jotunheim keeps it all right on your iOS device and lets you export to text.</div>",
                        "created": "2013-12-13T04:52:07.844Z",
                        "modified": "2013-12-13T04:52:07.844Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": []
                      },
                      {
                        "id": "sbmR3cMBn",
                        "doc": "resume",
                        "title": "Stuff that went into it",
                        "body": "Jotunheim is written in Objective-C and uses a Core Data store. It makes heavy use of blocks, and many third-party libraries for authorizing and posting to social network APIs, particularly an old modified version of ShareKit and oauthconsumer. It uses Core Animation for its help system.",
                        "created": "2013-12-13T04:52:25.817Z",
                        "modified": "2013-12-13T04:52:25.817Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": []
                      }
                    ]
                  },
                  {
                    "id": "smfSfGgXo",
                    "doc": "resume",
                    "title": "Chrome extensions and bookmarklets",
                    "body": "Since I spend a lot of time on the web, I find myself needing little things to modify my experience.<div><br></div><div>If you're curious about making bookmarklets and Chrome extensions,&nbsp;<a href=\"http://jimkang.com/articles/writing-dom-modifying-extensions/\">here's something I wrote about how it's done</a>.</div>\n\n\n\n\n\n\n\n",
                    "emphasize": true,
                    "created": "2015-04-29T16:35:02.075Z",
                    "modified": "2015-04-29T16:35:02.075Z",
                    "tags": [
                      "click-to-display"
                    ],
                    "children": [
                      {
                        "id": "senFFYq1f",
                        "doc": "resume",
                        "title": "1x1",
                        "body": "\n\n\n\n\n\n\n\n<a href=\"https://chrome.google.com/webstore/detail/1x1/ndjbmfonldogmcaajhhlogmgngmilnok\">1x1</a>&nbsp;(<a href=\"https://github.com/jimkang/1x1\">source</a>)&nbsp;displays one sentence at a time on a web page for the purpose of making reading that's either complex or intimidating more digestible.",
                        "created": "2013-12-13T23:04:57.969Z",
                        "modified": "2013-12-13T23:04:57.969Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [],
                        "children": [
                          {
                            "id": "s9J73rFWN",
                            "doc": "resume",
                            "title": "Not fertile ground",
                            "body": "<div>It uses a hacked-up old version of Readability to determine what the content on a web page is, then hides all the existing content on the page behind a div and shows just a sentence.</div><div><br></div><div>It's the least complete and least successful of the extensions I've made so far, as determining what the content is is very difficult, and it turns out not many people want to read that way.</div>",
                            "created": "2013-12-13T23:05:11.868Z",
                            "modified": "2013-12-13T23:05:11.868Z",
                            "tags": [
                              "level-3",
                              "click-to-display"
                            ],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "sIrxMuuEo",
                        "doc": "resume",
                        "title": "Back Again?",
                        "body": "This&nbsp;<a href=\"https://chrome.google.com/webstore/detail/back-again/kjponlihgeoeeppkmclokpbijdomjmfg\">Chrome extension</a>&nbsp;(<a href=\"https://github.com/jimkang/backagain\">source</a>)&nbsp;tells you how many times you've visited the&nbsp;page you're on in a button near the location bar, HUD-style.<div><br></div><div>It also provides a little graph of your visits in the last week if you click on the button. It's a small thing, but I'm very happy with the UI design in this extension.</div><div><br></div><div>There was a <a href=\"http://lifehacker.com/back-again-tracks-every-time-you-visit-a-site-1588729519\">nice review on Lifehacker</a> of it.<br></div>",
                        "created": "2013-12-13T04:56:43.966Z",
                        "modified": "2013-12-13T04:56:43.966Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": [],
                        "children": [
                          {
                            "id": "s1KVkjcRB",
                            "doc": "resume",
                            "title": "Futura!",
                            "body": "<div>Originally, the font I used for this project was Helvetica Neue. When I tried out Futura in the hopes of getting a little more clarity, things came to life. Numbers look sharp and strong but not weighty in Futura.</div><div><br></div><div>Not that I had anything against it before, but this validated the idea of type-centric design for me. Given that a large proportion (by volume and by user headspace) of many apps will be text, it makes sense to start with fonts that make that text flow and feel right.</div>",
                            "created": "2013-12-13T04:57:14.873Z",
                            "modified": "2013-12-13T04:57:14.873Z",
                            "tags": [
                              "level-3",
                              "click-to-display"
                            ],
                            "formats": [
                              "sprigot"
                            ],
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "sGjkrdEbu",
                        "doc": "resume",
                        "title": "PlayAll",
                        "body": "\n\n\n\n\n\n\n\n<a href=\"https://chrome.google.com/webstore/detail/playall/kjjpmnjffnbppejcphlilgchikkbpgif?hl=en\">PlayAll</a>&nbsp;plays all of the YouTube videos linked on a page in one continuous stream. So, if you are reading a list of music recommendations, you can just sit back while they play instead of clicking each one.<div><br></div>\n\n\n\n\n\n\n\n<div><a href=\"https://github.com/jimkang/playall\">The way it works</a>&nbsp;is that it finds the YouTube links on page, then inserts a YouTube player (with window controls) into the DOM, then queues up the videos.</div>",
                        "created": "2015-04-29T18:09:52.335Z",
                        "modified": "2015-04-29T18:09:52.335Z"
                      },
                      {
                        "id": "sVIvThTTw",
                        "doc": "resume",
                        "title": "Fuck Shit Up",
                        "body": "\n\n\n\n\n\n\n\n<a href=\"https://chrome.google.com/webstore/detail/fuck-shit-up/aacmlcbfmkjencmcpckpcgegoiejeeeg\">Fuck Shit Up</a>&nbsp;is a Chrome extension that semi-judiciously&nbsp;sprinkles&nbsp;(by looking for certain&nbsp;parts of speech) some \"fuck\"s into whatever web page you're reading. Not enough fucks? Hit the button a few more times. Gets interesting results when applied to news, dry technical stuff, Wikipedia, and Twitter at the least.<div><br></div><div>Check out these modules to see how it's put together:</div><div>\n\n\n\n\n\n\n\n<p class=\"p1\">- <a href=\"https://github.com/jimkang/fuck-shit-up\">fuck-shit-up</a></p><p class=\"p1\">- <a href=\"https://github.com/jimkang/fuck-shit-up-bookmarklet\">fuck-shit-up-bookmarklet</a></p></div>",
                        "created": "2015-04-29T18:10:16.513Z",
                        "modified": "2015-04-29T18:10:16.513Z",
                        "formats": [
                          "sprigot"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "sWtOfdebj",
                    "doc": "resume",
                    "title": "Design exercises",
                    "body": "These project have little or no interactivity. The challenges here are more about visual design.",
                    "created": "2015-04-29T18:16:09.053Z",
                    "modified": "2015-04-29T18:16:09.053Z",
                    "tags": [
                      "click-to-display"
                    ],
                    "children": [
                      {
                        "id": "ssGaRyNMZ",
                        "doc": "resume",
                        "title": "Smidgeo.com",
                        "body": "Although&nbsp;<a href=\"http://smidgeo.com/\">smidgeo.com</a>&nbsp;is mostly an expression of an inside joke about my cat and his corporation, it's also an exercise in designing a flashy marketing-oriented web site. I learned a lot about CSS animation, responding to scrolling, SVG icons, and&nbsp;<a href=\"http://jimkang.com/articles/between-480000-and-960000/\">overwhelming the DOM</a>.",
                        "created": "2015-04-29T18:16:19.861Z",
                        "modified": "2015-04-29T18:16:19.861Z",
                        "formats": [
                          "sprigot",
                          "bloge"
                        ]
                      },
                      {
                        "id": "szHQPmvIo",
                        "doc": "resume",
                        "title": "Glowy Clock",
                        "body": "<a href=\"http://glowyclock.com/\">It's just a clock that changes colors, slowly</a>,&nbsp;<a href=\"https://github.com/jimkang/glowyclock\">forked off</a>&nbsp;of another&nbsp;project.&nbsp;But it reminds me of an old, soothing clock we used to have, and it was a good exercise in restrained design and CSS transitions.",
                        "created": "2015-04-29T18:16:29.710Z",
                        "modified": "2015-04-29T18:16:29.710Z",
                        "formats": [
                          "bloge",
                          "sprigot"
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "id": "sJxtIPIxj",
                "doc": "resume",
                "title": "Generative code",
                "body": "I like to write code that generates things. I like to be surprised. It is a change of pace from the rest of my career, which is mostly about writing code that acts extremely predictably.",
                "created": "2015-04-29T17:12:29.702Z",
                "modified": "2015-04-29T17:12:29.702Z",
                "tags": [
                  "level-2",
                  "click-to-display"
                ],
                "formats": [
                  "sprigot",
                  "bloge"
                ],
                "children": [
                  {
                    "id": "sgJYlqKWd",
                    "doc": "resume",
                    "title": "Bots!",
                    "body": "<div><a href=\"#/resume/sYvaYmEiI\">Bots are an amazing medium</a>. Most of my bots are on Twitter.&nbsp;<a href=\"https://twitter.com/deathmtn/lists/twitter-bots-lots/members\">Here's a list of them.</a></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                    "created": "2015-04-29T14:21:37.078Z",
                    "modified": "2015-04-29T14:21:37.078Z",
                    "tags": [
                      "level-3",
                      "click-to-display"
                    ],
                    "children": [
                      {
                        "id": "scxjfrthi",
                        "doc": "resume",
                        "title": "@godtributes",
                        "body": "<div><a href=\"https://twitter.com/godtributes\">This is a merciless generalization</a>&nbsp;of the \"BLOOD FOR THE BLOOD GOD!\" meme. I wasn't really into it until my friend Matt said \"GROWTH FOR THE GROWTH GOD!\" in reference to the relentless House Republicans. Then, it clicked. To my great delight, it has since picked up a loyal and clever following.</div>\n\n\n\n\n\n\n\n<div><br></div><div>This joke has not gotten tired as quickly as I thought it might.&nbsp;<a href=\"https://github.com/jimkang/godtributes\">With a few different kinds of variation and basically all of the nouns in the English language</a>, it's able to surprise, even after 70K tweets.&nbsp;</div><div><br></div><div>Through @godtributes, I learned quite a lot about pluralization inconsistencies in the English language, Twitter REST API rate limits, and just how hard it is to prevent a bot from unintentionally saying horrific things.</div><div>\n\n\n\n\n\n\n\n<p class=\"p1\">Here's a nice review of it <a href=\"http://iloveepoetry.com/?p=12002\">on I Love E-Poetry</a> that discusses its poetic appeal.</p></div>",
                        "emphasize": true,
                        "created": "2015-04-29T17:33:59.887Z",
                        "modified": "2015-04-29T17:33:59.887Z",
                        "tags": [
                          "level-3"
                        ],
                        "formats": [
                          "sprigot",
                          "bloge"
                        ],
                        "children": [
                          {
                            "id": "sLVGgFeSB",
                            "doc": "resume",
                            "title": "Architecture",
                            "body": "You can find the code for godtributes on <a href=\"https://github.com/jimkang/godtributes\">GitHub</a>. It has two main \"executables:\"<div><br></div><div>- maketribute.js - This comes up with the standalone tributes and posts them to Twitter. It is the simpler of the two.</div><div>- exhortationserver.js - This listens to the Twitter streaming API for tweets from @godtributes' followers, then analyzes each of them for interestingness and time since the last reply. Then, if it finds something to say, it tweets replies at them.</div><div><br></div><div>These two use a lot of modules for parsing language via the Wordnik API, parsing tweets, pluralizing and singularizing, picking figures for the tributes (\"GOD,\" \"THRONE\", \"POTENTATE\"), recording replies, connecting to shared API cache databases over RPC, following non-spam followers, handling emoji, translating to languages if desired, and figuring out what is inappropriate to say or to respond to.</div><div><br></div><div>That last task has proven to be the most work. Although a bot that doesn't understand language in a deep sense cannot prevent tone deaf replies to people about sensitive topics 100% of the time, checking for keywords can get to about 80%.</div>",
                            "created": "2015-04-30T19:46:46.040Z",
                            "modified": "2015-04-30T19:46:46.040Z",
                            "tags": [
                              "level-4"
                            ],
                            "formats": [
                              "sprigot"
                            ]
                          },
                          {
                            "id": "sSFLRvwrl",
                            "doc": "resume",
                            "title": "Roadmap",
                            "body": "<div>- Fixing multilevel RPC event listener leaks that seem to occasionally prevent it from getting any events.</div>- ConceptNet integration.<div>- Clarifai integration?</div>",
                            "created": "2015-04-30T19:59:17.561Z",
                            "modified": "2015-04-30T19:59:17.561Z",
                            "tags": [
                              "level-4"
                            ],
                            "formats": [
                              "sprigot"
                            ]
                          }
                        ]
                      },
                      {
                        "id": "suBAqteov",
                        "doc": "resume",
                        "title": "console.log()",
                        "body": "Console.log is a bot that pulls public events from the GitHub API (e.g. pushes) and then combs through them for logging statements like `console.log` and `NSLog` and posts them to Twitter along with a link back to the commit on Github. I like seeing what people log, and sometimes it leads me to interesting repos on Github.",
                        "created": "2015-04-29T17:58:10.723Z",
                        "modified": "2015-04-29T17:58:10.723Z"
                      },
                      {
                        "id": "sAXZsxRnY",
                        "title": "Corpus transformers",
                        "body": "This is a class of bots that samples some source corpus, then transforms it in some way.",
                        "created": "2015-05-02T00:26:13.452Z",
                        "modified": "2015-05-02T00:26:13.452Z",
                        "children": [
                          {
                            "id": "seshnePmc",
                            "doc": "resume",
                            "title": "The Fucking Bard",
                            "body": "This bot takes excerpts from the works of Shakespeare and then finds the right places to insert forms of the word \"fuck\". Then, it posts them to Twitter and Tumblr.<div><br></div><div>It is puerile, but amusing, and gets me to pay attention to Shakespeare passages I otherwise have not noticed.</div><div><br></div><div>I also ported the meat of the code into a&nbsp;<a href=\"#/resume/sVIvThTTw\">Chrome extension</a>.</div>\n\n\n\n\n\n\n\n",
                            "created": "2015-04-29T17:51:09.846Z",
                            "modified": "2015-04-29T17:51:09.846Z"
                          },
                          {
                            "id": "sCIqPpcks",
                            "doc": "resume",
                            "title": "Translation bots",
                            "body": "<div>@a_chance_bot, @translatedbible, and @new_aeneid. These are bots (working off of the same app) that take some source quotation, then translate it to several non-English languages and back to English. The results have been largely disappointing. I am amused by about one post from each of these bots a day.</div><div><br></div><div>I started this project after watching a Leslie Lamport video and then wrote a rigorous specification, which I've never done before. That took a while. I also scratched my bikeshedding itch by making my own dependency injector.</div><div><br></div><div>In a sense, I made the classic mistake of investing too much engineering effort without first proving that doing so is worthwhile. However, I can also write this off as a chance to scratch some itches. Not the best use of time, though.</div>",
                            "created": "2015-04-29T17:46:41.492Z",
                            "modified": "2015-04-29T17:46:41.492Z"
                          },
                          {
                            "id": "sfkKSrIFU",
                            "title": "Autocomplete Rap",
                            "body": "@autocompleterap goes through Google autosuggest to get pairs of words that go together then inserts them templates that have \"___ and ___\" in them. e.g. \"1, 2, 3 and to the 4/Invisibility and force fields is at the door\"",
                            "created": "2015-05-02T00:28:23.905Z",
                            "modified": "2015-05-02T00:28:23.905Z",
                            "doc": "resume"
                          }
                        ],
                        "doc": "resume"
                      },
                      {
                        "id": "snXvIvrIq",
                        "doc": "resume",
                        "title": "Smidgeo Dice",
                        "body": "Smidgeo Dice is a dice server that listens to Twitter for requests to roll dice in the kind of syntax you see in role-playing games, e.g. 2d6+3. It then parses them, using the&nbsp;<a href=\"https://www.npmjs.com/package/node-dice-js\">awesome node-dice-js NPM package</a>&nbsp;and posts back the results.<div><br></div><div>Because Twitter doesn't allow you to post the same tweet twice in certain span of time and many dice roll results are often the same, it injects a random emoji into each response. Serendipitously, the replies are more fun to look at that way.</div><div><br></div><div>It's also available as a&nbsp;<a href=\"https://www.npmjs.com/package/dicecup\">command-line tool</a>, for people that want to roll dice in their terminals.</div>\n\n\n\n\n\n\n\n",
                        "created": "2015-04-29T17:50:37.437Z",
                        "modified": "2015-04-29T17:50:37.437Z"
                      },
                      {
                        "id": "sTWwcRctQ",
                        "doc": "resume",
                        "title": "Permutation explorers",
                        "body": "<a href=\"https://twitter.com/TripleAGamesBot\">Realest Video Games</a> and <a href=\"https://twitter.com/monstersubtypes\">Monster Subtypes</a> are fairly simple. They have <a href=\"https://github.com/jimkang/triple-a-namer/blob/master/data/wordpool.json\">simple</a> <a href=\"https://github.com/jimkang/triple-a-namer/blob/master/assemble-groups-into-title.js\">grammars</a> and pools of words to feed into them. I find that Monster Subtypes comes up with some evocative creatures (and some boring ones) by combining descriptors and monster names together. Realest Video Games fairly consistently comes up with stuff that you'd find on the top \"core\" games lists on Metacritic.",
                        "created": "2015-04-29T17:52:22.887Z",
                        "modified": "2015-04-29T17:52:22.887Z",
                        "children": [
                          {
                            "id": "sMsiFNuIj",
                            "doc": "resume",
                            "title": "Rap Game Metaphor",
                            "body": "<div>@rapgamemetaphor is very simple&mdash;it takes a noun, then puts it in a template, like \"I'm the rap game ribbing!\" Or \"It's the double-header of the rap game!\"</div>",
                            "created": "2015-04-29T17:47:37.817Z",
                            "modified": "2015-04-29T17:47:37.817Z"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "sUkhxWExm",
                    "doc": "resume",
                    "title": "Web",
                    "body": "The web is a good place for these.",
                    "created": "2015-04-29T17:40:16.680Z",
                    "modified": "2015-04-29T17:40:16.680Z",
                    "tags": [
                      ""
                    ],
                    "children": [
                      {
                        "id": "skdteGWvP",
                        "doc": "resume",
                        "title": "Named Levels",
                        "body": "1st Edition Advanced Dungeons &amp; Dragons had a charming quirk in it. Every experience level for every class <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0CC4QFjAC&amp;url=http%3A%2F%2Farchive.wizards.com%2Fdefault.asp%3Fx%3Ddnd%2F4alum%2F20090206&amp;ei=TJRCVYGhC8vksATk7YCYBA&amp;usg=AFQjCNGXbjGv7vFTbYOM8vAY9NZWK4ooiQ&amp;sig2=66UeN4_FTTt82aSLyCpa5w\">had a separate name</a>.&nbsp;<a href=\"http://jimkang.com/namedlevels/#/class/website\">Named Levels</a> is a web app that tries to generate those names for any possible \"class\" you could think of.<div><br></div><div>There's a lot that goes into the generation of the level names, but this project involves a lot of visual design to make it look like a page from a manual from the seventies, but also to make it readable on small and large screens alike.</div>",
                        "created": "2015-04-29T17:52:58.618Z",
                        "modified": "2015-04-29T17:52:58.618Z"
                      },
                      {
                        "id": "soyVWydyg",
                        "doc": "resume",
                        "title": "Browser-based cellular automata",
                        "body": "My&nbsp;<a href=\"http://jimkang.com/reactivecell/example/liquid.html\">browser-based cellular automaton</a>&nbsp;is on hold and has been for a while, but the idea was to build something I could use to simulate systems in a way that is easily sharable.",
                        "created": "2015-04-29T17:41:01.872Z",
                        "modified": "2015-04-29T17:41:01.872Z"
                      },
                      {
                        "id": "sRPQlUGjw",
                        "doc": "resume",
                        "title": "Non-Stop Scroll Shop",
                        "body": "Do you like products? Do you like scrolling? How about infinite scrolling? Well, then! Come on down to&nbsp;<br>\n\n\n\n\n\n\n\n<a href=\"http://nonstopscrollshop.com\">Non-Stop Scroll Shop</a>&nbsp;where&nbsp;we'll always have something new for youâ€¦forever.<div><br></div><div>I wrote this partly in response to the excessive use of infinite scrolling I was seeing at the time, but also because I had started writing a product name generator in the midst of doing a programming test and wanted to expand on it.</div>",
                        "created": "2015-04-29T17:40:31.826Z",
                        "modified": "2015-04-29T17:40:31.826Z"
                      },
                      {
                        "id": "sQP1gGYdc",
                        "doc": "resume",
                        "title": "And Bad Mistakes, I've Made a Few",
                        "body": "(Yes, that is the name of the app.)<div><br></div><div>Originally, I had a more ambitious idea for&nbsp;<a href=\"http://blog.echonest.com/post/66776489063/the-echo-nests-5th-music-hack-day-boston-was-a-roaring\">Music Hack Day</a>, but&nbsp;as time ran down, it devolved into&nbsp;an&nbsp;app that takes a song and makes random beats the wrong pitch&mdash;<a href=\"http://jimkang.com/mhd/pour.html\">a music ruiner</a>.&nbsp;That's how hack days tend to go.<div><br></div><div>It amused the crowd, and it got me started on music programming, so I'm glad I did it.</div></div>",
                        "created": "2013-12-13T04:58:37.989Z",
                        "modified": "2013-12-13T04:58:37.989Z",
                        "tags": [
                          "level-2",
                          "click-to-display"
                        ],
                        "formats": []
                      }
                    ]
                  },
                  {
                    "id": "sLEpWGZSN",
                    "doc": "resume",
                    "title": "Distinctions between bot and web media",
                    "body": "Bots are the most direct practical way to deliver generative code I can think of. Perhaps handing someone the code to execute on their command line would be more direct, but very few people these days want to bother with that.<div><br></div><div>It's a lot less commitment for people to look at or follow a Twitter feed that just comes up with stuff and delivers it to them, passively and regularly. That it acts on its own makes it a little more oracular than something you can just command whenever you want.</div><div><br></div><div>Slow drip/autonomy/the number of possibilities.</div>",
                    "created": "2015-05-03T23:53:28.931Z",
                    "modified": "2015-05-03T23:53:28.931Z",
                    "formats": [
                      "sprigot"
                    ]
                  },
                  {
                    "id": "smErVqEXw",
                    "doc": "resume",
                    "title": "Using the imaginations of others",
                    "body": "Minimum explicitness<div><br></div><div><div>It's very satisfying to see your program suggest a concept or image that had not occurred to you before you ran it. There are just so many simple human speech and thought patterns that, when automated, yield amazing results.</div><div><br></div><div>The code does not not always have to be complex for this to be a good experience. Surprisingly simple things can stir the imagination.</div></div>",
                    "created": "2015-05-04T00:30:52.022Z",
                    "modified": "2015-05-04T00:30:52.022Z",
                    "tags": [
                      "tags",
                      "go",
                      "here"
                    ],
                    "formats": [
                      "sprigot"
                    ]
                  }
                ]
              },
              {
                "id": "swQeYNqfK",
                "doc": "resume",
                "title": "Libraries and modules",
                "body": "See&nbsp;<a href=\"https://www.npmjs.com/~jimkang\">NPM</a>.",
                "created": "2015-04-29T17:01:19.385Z",
                "modified": "2015-04-29T17:01:19.385Z",
                "tags": [
                  "level-1",
                  "dial-back-a-little"
                ]
              }
            ]
          },
          {
            "id": "siwPPlnbm",
            "doc": "resume",
            "title": "Perspective",
            "body": "Here is how I view the building of software. It is a pile of opinions, so it may or may not be valuable to you. (Though they are informed opinions, I like to think).",
            "created": "2015-04-27T15:49:03.073Z",
            "modified": "2015-04-27T15:49:03.073Z",
            "tags": [
              "level-1",
              "click-to-display"
            ],
            "formats": [
              "sprigot"
            ],
            "children": [
              {
                "id": "sYFfmHDJU",
                "doc": "resume",
                "title": "Test-driven development",
                "body": "TDD is an industry trend that has been in the headlines (or more accurately blog post titles) for quite a while now. So, it is natural to distrust it.<div><br></div><div>But I actually like TDD on a personal level.</div><div><br></div><div>Most of my&nbsp;<a href=\"https://github.com/jimkang/?tab=repositories\">code</a>&nbsp;has unit tests, even the repos for the fun projects. I don't do it appease the all-seeing eye of the Best Practices God or to stay abreast of hott dev trends. They have been genuinely helpful, in many cases, they've gotten me unstuck. There's actually more value to them beyond quality assurance.</div>",
                "created": "2015-04-27T19:59:33.940Z",
                "modified": "2015-04-27T19:59:33.940Z",
                "children": [
                  {
                    "id": "sFGOQftAU",
                    "doc": "resume",
                    "title": "Fixing functions vs. fixing whole dang web apps",
                    "body": "What's easier to debug? A function, `getUserId` that is intended to take a username and return a corresponding user id but is returning `undefined` or a user getting no response from a web site when trying to look up their documents?<div><br></div><div>It's, of course, the function that is easier to analyze and fix than the broad behavior. Now, if you saw that broad behavior and had a power hunch that getUserId was the underlying problem, what would you do about it?</div><div><br></div><div>I think you'd want to make sure that it really was the problem. So, you'd start the server, then click whatever and see via the debugger or logs what was coming into getUserId. If it is something already covered by the tests for getUserId, then you can just run the tests again and see what happens.</div><div><br></div><div>If the input was not anticipated, then you update the tests to include that input, run it, and see what's going wrong. That is a short feedback loop.</div><div><br></div><div>Without unit tests, you have to add logs, then run the entire app. That is a long feedback loop.</div>",
                    "created": "2015-04-28T14:42:40.995Z",
                    "modified": "2015-04-28T14:42:40.995Z",
                    "children": [
                      {
                        "id": "sYUPQvxqy",
                        "title": "Loop effects",
                        "body": "The size of the feedback loop has&nbsp;<i>huge&nbsp;</i>effects on development, especially my development. A short feedback loop:<div><br></div><div>- Reduces frustration</div><div>- Reduces the amount of (human) memory you need to process a problem</div><div>- Makes experimentation less costly</div>",
                        "created": "2015-04-28T20:34:11.771Z",
                        "modified": "2015-04-28T20:34:11.771Z",
                        "doc": "resume"
                      },
                      {
                        "id": "sNHpnqpAo",
                        "doc": "resume",
                        "title": "EDD",
                        "body": "In the previous example, the tests' greatest value wasn't their ability to evaluate correctness.&nbsp;<i>It was their ability to easily execute an isolated piece of code.</i><div><br></div><div>If you wanted, you could establish that same ability by writing simple executables that loaded that code and ran it. You could call this executable-driven development.</div><div><br></div><div>Just as if you had a lot of unit tests, you'd have handles on every piece of code in your project, so that you could play with and examine each without going through onerous indirect steps to see the code work.</div><div><br></div><div>If you can easily run everything in your project, you can (relatively) easily fix and modify everything in your project.</div>",
                        "created": "2015-04-28T20:56:47.044Z",
                        "modified": "2015-04-28T20:56:47.044Z",
                        "children": [
                          {
                            "id": "sLxfVyoCR",
                            "title": "Tools",
                            "body": "It just so happens that if you're going to do the work of doing that, you might as well add some assertions that check the correctness of the code being run. Hence, tests.<div><br></div><div>Most of the time. Sometimes, it's hard to write the assertions because you don't know what the module or function should do yet. In this case, a good alternative is to write tools&mdash;executables that load and run the code using parameters specified on the command line.</div><div><br></div><div>I've used this in lieu of tests on a few projects:&nbsp;<a href=\"https://github.com/jimkang/material-monsters\">material monsters</a>, <a href=\"https://github.com/jimkang/levelnamer\">levelnamer</a>, and <a href=\"https://github.com/jimkang/triple-a-namer\">triple-a-namer</a>. I started not knowing exactly what I wanted these modules to do, but by immediately establishing a way to load and run them easily, I was able to more quickly see in which direction I wanted them to go.</div>\n\n\n\n\n\n\n\n",
                            "created": "2015-04-29T02:14:52.643Z",
                            "modified": "2015-04-29T02:14:52.643Z",
                            "doc": "resume"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "sXSpfDNkP",
                    "doc": "resume",
                    "title": "Writing prompts",
                    "body": "Tests are thought of as something to do after you know what the code is supposed to do, but I find they function as effective writing prompts. Just pick a thing you think you might want your module to do, write a simple test for it and run that test. When it fails, start writing code to make that test pass.<div><br></div><div>More often than not, while doing this, you realize more about what you want the module to do. Then, you can revise the tests, revise the code, and repeat. I find that writing then rewriting like this beats clenching your brain trying to think of the whole thing in one go before starting.</div>",
                    "created": "2015-04-28T14:45:51.495Z",
                    "modified": "2015-04-28T14:45:51.495Z"
                  }
                ]
              },
              {
                "id": "slxwVoiKD",
                "doc": "resume",
                "title": "Design",
                "body": "Much in the same way that many designers are willing to code, I am willing to design. The more you design, the better you get at it.<div><br></div><div>While I'm not the greatest designer, I don't view UI design as magic. I can design. I designed this app and many others, after all. Similarly, I am fine with designers or whoever coding, as long as it's good code.</div><div><br></div><div>As a fairly basic designer, I mostly adhere to the principles of progressive enhancement and \"do/have as little as possible,\" and these generally keep me out of trouble.</div>",
                "created": "2015-04-28T04:08:54.506Z",
                "modified": "2015-04-28T04:08:54.506Z"
              },
              {
                "id": "suvgPEOSe",
                "doc": "resume",
                "title": "The web!",
                "body": "I feel that the modern web is a fantastic sharing medium. Not only can it still do what it started doing&mdash;easily distribute text that links to other text&mdash;it can also communicate in all sorts of other ways.<div><br></div><div>SVG! 3D rendering in Canvas and WebGL! Video! Audio! Smooth CSS animations!</div><div><br></div><div>Of course, these modes of expression can and are used for ill. But you can also make&mdash;and share&mdash;great experiences with all of this. After having&nbsp;<a href=\"#/resume/s0VEAY0Or\">worked</a> a <a href=\"#/resume/sk10P9UiJ\">few years</a>&nbsp;with native mobile apps, I was astonished at how quickly one could build similar functionality on the web.</div><div><br></div><div>No doubt, rendering and responses can be silkier on native apps, but the trade-off is that sharing what you build is so much easier on the web. Everyone has a browser. Not everyone has an iPhone or is willing to go through a multi-step downloading, installing, and starting process. Whereas if you send them your web app&mdash;they go to your URL and BLAOW! They have it.</div>\n\n\n\n\n\n\n\n",
                "created": "2015-04-29T14:24:19.417Z",
                "modified": "2015-04-29T14:24:19.417Z",
                "children": [
                  {
                    "id": "sfPBYdBqO",
                    "title": "A real simple example",
                    "body": "A friend of mine had this problem pop up in the midst of a crunch-type situation:<div><br></div><div>- There was a huge text file.</div><div>- Each line of the text file needed to be repeated n times.</div><div>- Certain prefixes and suffixes needed to be appended to every line.</div><div><br></div><div>(This was for some kind of QR code-making thing.)</div><div><br></div><div>I'm sure you can think of many ways to solve this problem. Python scripts. Excel macros. awk, maybe. The problem with these solutions is that they are all platform-dependent. You have to install Python. You have to install Excel. You have to have a Unix on your machine.</div><div><br></div><div>This is where The Web comes in. Everyone has a browser! So, I took about fifteen minutes to&nbsp;<a href=\"https://github.com/jimkang/repeat-lines-web\">write</a>&nbsp;this <a href=\"http://jimkang.com/repeat-lines-web/\">ugly little web app</a>, and my friend was able to open it in a browser and run it.</div>\n\n\n\n\n\n\n\n",
                    "created": "2015-04-29T20:31:16.364Z",
                    "modified": "2015-04-29T20:31:16.364Z",
                    "doc": "resume"
                  },
                  {
                    "id": "sYvaYmEiI",
                    "title": "Bots",
                    "body": "<div>Bots are an amazing medium. Often, the same code that powers a bot could be made available as a self-serve web app. But when you do that, it becomes closer to a tool, something the audience controls completely. Bots' autonomy create a certain kind of negative space that people's minds will often fill in, sometimes to amazing effect.</div><div><br></div><div>There's also an excellent community around bots that's both friendly and supportive, in addition to being creative.</div>",
                    "created": "2015-05-04T15:45:22.868Z",
                    "modified": "2015-05-04T15:45:22.868Z",
                    "doc": "resume"
                  }
                ]
              },
              {
                "id": "sbxBXlZRg",
                "title": "Paying up front vs. paying \"someday\"",
                "body": "Framework-centric development is popular, to understate things. You have an app to make, so you look at various framework demos and see which features in your app you can get \"for free.\" Then, you pick the framework that gives you the most for free, and then write code to do the rest.<div><br></div><div>In my experience, what usually happens is that eventually, something goes wrong with the free features or you need something that the framework is not intended to handle. It is that point, usually under some sort of time pressure, that you have to understand how the magic works. Often, it will be the team's first time looking at the underlying code.</div><div><br></div><div>That is not a winning situation.</div><div><br></div><div>This doesn't apply to just frameworks. It applies to libraries as well. I first learned this while <a href=\"#/resume/simFd2yFY\">gobbling up open source libraries like candy</a> to build Jotunheim, and have seen this at my most recent job while dealing with various \"here just use it\" modules and AngularJS. I have stepped through and console.logged so many modules and frameworks that should have \"just worked.\"</div><div>\n\n\n\n\n\n\n\n<p class=\"p1\">I think <a href=\"http://www.macwright.org/presentations/\">Tom MacWright</a> said this in one of his talks (but I can't find a link right now):&nbsp;Never abstract something you don't understand. You don't have to understand the code you use perfectly, but if you have no idea what a piece of code is doing when you bring it, you will also have no idea what it's doing when you have to fix a bug under pressure.</p><p class=\"p1\">You can increase predictability and reduce stress and mistakes by just picking small, focused modules that specific things and understand how your code works up front instead of big magic modules or frameworks filled with crazy crap.</p></div>\n\n\n\n\n\n\n\n",
                "created": "2015-04-30T18:51:55.068Z",
                "modified": "2015-04-30T18:51:55.068Z",
                "doc": "resume"
              }
            ]
          },
          {
            "id": "sOcQEejyY",
            "doc": "resume",
            "title": "Keywords!",
            "body": "For better or worse, a lot of people look for this in a résumé. So, here it is:<div><br></div><div><div>- JavaScript</div><div>- Mostly functional, closure-centric programming</div><div>- Problems and benefits of prototypal inheritance</div><div>- Node.js<br></div><div>- Test-driven development</div><div>- Modular architecture</div><div>- LevelDB</div><div>- NPM</div><div>- CSS 3, Flexbox, animations</div><div>- Browserify<br></div><div>- Objective-C</div><div>- Git, Git Flow</div><div>- Tape, Mocha</div><div>- Backbone.js</div><div>- C++</div></div><div>- SQL</div><div>- HTML (v1-5)</div><div>- At least a 1X engineer, maybe even 1.1X</div>",
            "emphasize": true,
            "created": "2015-04-27T17:57:21.982Z",
            "modified": "2015-04-27T17:57:21.982Z",
            "tags": [
              "level-1",
              "click-to-display"
            ],
            "formats": [
              "sprigot",
              "bloge"
            ]
          },
          {
            "id": "seQVP07tc",
            "doc": "resume",
            "title": "About this format",
            "body": "This document is organized as a tree. You can click the dots in the tree at the left to explore the document. The app presenting it is called&nbsp;<a href=\"\">Sprigot</a>.<p class=\"p1\">To zoom in and out, use the mouse or a pinch gesture. Drag around to pan the view.<br></p><p class=\"p1\">You can read as deeply or shallowly as you'd like. For a brief read, you can click just the blue dots.&nbsp;</p><p class=\"p1\">If you'd like a more traditional-looking resume, you can&nbsp;<a href=\"#/resume/llkGiyAj?format=bloge\"><b>view it in this format</b></a>.</p>",
            "created": "2013-12-18T02:40:49.693Z",
            "modified": "2013-12-18T02:40:49.693Z",
            "tags": [
              "click-to-display"
            ],
            "formats": [
              "sprigot"
            ]
          }
        ]
      }
    }
  }
}